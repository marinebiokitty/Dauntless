GameTeX/README




Documentation:

All GMs should read this file, as well as the README files in each of
the directories.  You should also skim through the -LIST.tex files in
Lists/.  If you are planning to run production or do non-trivial
customization for your game, you should also read through the files in
LaTeX/.




Requirements:

GameTeX is designed to run on Athena.  It can be run elsewhere; this
would require a complete LaTeX installation and possibly some changes
reflective of different platforms, notably the definitions of certain
filepaths.  GMs are assumed to have basic working knowledge of LaTeX.
SIPB's Inessential LaTeX can be a good starting place.  It is
available at the following locations:

  http://www.mit.edu/afs/sipb.mit.edu/project/doc/current/iLaTeX.dvi
  http://www.mit.edu/afs/sipb.mit.edu/project/doc/current/iLaTeX.PS
  http://www.mit.edu/afs/sipb.mit.edu/project/www/latex/guide/guide.html

For a more complete introduction to LaTeX, read the excellent LaTeX: A
Document Preparation System by Leslie Lamport, the original author of
LaTeX.  Though both GameTeX and LaTeX are built around the TeX
typesetting system by Donald Knuth, most GMs do not need to know its
deep mysteries.  The TeXbook, also by Donald Knuth, is the canonical
source of information about TeX, and The Advanced TeXbook, by David
Salomon, is an excellent introduction to TeX as a programming
language.



e-TeX: GameTeX requires e-TeX (an extension of TeX) to work properly.
On Athena, this simply means you latex files with "elatex filename"
rather than "latex filename."  elatex should not break in any way when
run on valid latex files, so it is generally safe to alias latex to
elatex.



The newtex Locker: The LaTeX installation in the newtex locker (on
Athena) is old and somewhat obsolete.  If you have "add -f newtex" in
your .environment file, some things may not work.  Don't use the
newtex locker; the default Athena install of LaTeX (the teTeX
distribution) is sufficient and supported.




Setup:

To install GameTeX, simply copy the files from GameTeX/ to wherever
you are keeping files for your game.  You will probably rename the top
GameTeX/ directory to something representative of your game.



The Class File: In the LaTeX/ directory is a file called game.cls.
This is the LaTeX2e class file, which is the root of GameTeX.

Since the default class name for GameTeX is game, the class file is
game.cls, and LaTeX files start with

  \documentclass[<option>]{game}

You may want to change the class name.  If you're writing multiple
games, you will definitely want to change it to make sure each game
has a unique class name.

Changing the class name requires changing the class filename and the
definition of the \gameclassname macro, set in the class file, to
match.  In addition, all game files should point to the new class
file.  For example, if you are writing a game called "Ten Days in
London," a good class name might be "london."  To set this up, you
would rename game.cls to london.cls, change the \def of \gameclassname
to london, and make sure to change the

  \documentclass[<option>]{game}

lines to

  \documentclass[<option>]{london}

in files already created, i.e. Bluesheets/README.tex,
Charsheets/README.tex, Greensheets/README.tex, Whitesheets/README.tex,
and files in Production/.

When coming up with a class name, keep in mind that the class name
will be used as an environment variable (see below).  For example,
\def\gameclassname{SHELL} would be very, very bad.  Use printenv to
see your current environment.

If you have not done major restructuring to the game's directory tree,
you may be able to use the perl script Extras/changeclass.pl (see
Extras/README) to automate changing the class name.  This is
especially useful when you first set GameTeX up and choose a class
name.

The .cls file is also for basic customization.  It includes macros
like \gamename and \gamedate.  These are, respectively, the name and
run-date of your game, and they are available and used throughout
GameTeX.



Your Environment File: In short, to be able to use GameTeX, add the
following lines to your .environment file:

  setenv <gameclassname> <pathtoyourgame>
  setenv TEXINPUTS .:$<gameclassname>/LaTeX/:
  setenv TEXMFCNF $TEXINPUTS

<gameclassname> is whatever you set \gameclassname to, e.g. london or
somegame.  <pathtoyourgame> is the filepath, such as
/mit/assassin/games/SomeGame.  For example:

  setenv somegame /mit/assassin/games/SomeGame
  setenv TEXINPUTS .:$somegame/LaTeX/:
  setenv TEXMFCNF $TEXINPUTS

The TEXINPUTS environment variable tells LaTeX where to find the class
file for your game, and should at least include the path to the LaTeX/
directory for your game.  The game-specific environment variable
(e.g. $london) is used by the class file for relative filepaths.  If
you are writing multiple games using GameTeX, use something like this:

  setenv somegame /mit/assassin/games/SomeGame
  setenv london /mit/assassin/games/London
  setenv TEXINPUTS .:$somegame/LaTeX/:$london/LaTeX/:
  setenv TEXMFCNF $TEXINPUTS

The TEXMFCNF environment variable lets (e-)TeX find the modified
texmf.cnf file GameTeX includes.

Once you have edited your .environment file, the simplest way to load
the changes is logging out and in.




Directory Organization:

The default directories included in GameTeX are organized for basic
game design.  If your game needs a different directory structure, it
can be changed by editing the class file.  Each directory has a README
file.  You should read these.  The sheet directories (Charsheets/,
Bluesheets/, Greensheets/) each include a _template.tex file, which is
a bare, empty sheet of the right type.  "cp _template.tex blah.tex" is
a convenient way to start a new sheet.

Bluesheets/ is where bluesheets are kept.  The directory contains a
README.tex file that covers what special commands are available in
bluesheets.  This file is also an example bluesheet that can be
latex'ed.

Charsheets/ is where character sheets are kept.  The directory
contains a README.tex file that covers what special commands are
available in character sheets.  Like the equivalent bluesheet
README.tex, this file is an example sheet that can be latex'ed.

Extras/ contains a few things that don't fit directly within basic
GameTeX, including a few prebuilt customizations and examples.  See
Extras/README.

Greensheets/ is where greensheet files are kept.  Similar to the
Bluesheets/ and Charsheets/ directories, it contains a README.tex that
covers special greensheet commands, if any, and works as a latex'able
example greensheet.

LaTeX/ is for LaTeX style and class files.  The class file and
gametex.sty (where most of the code is) are intended to be customized;
the other style files aren't.  See LaTeX/README.

Lists/ is where -LIST.tex files are kept, for globally available
macros that act as a database for the game.  Each file defines a type
or family of types of macros, such as characters or bluesheets, etc.
These datatypes store fields of data and other code.  You should read
through and be familiar with most of this directory.  Lists/README
describes in some detail how to use datatypes in -LIST.tex files.

Notebooks/ is where choose-your-own-adventure research notebook files
are kept.  It contains a README.tex that covers how to make a research
notebook and works as a latex'able example notebook.

Postscript/ is where dvips header files are kept, and is a convenient
place for postscript images.  The header files are included for
special functions of the dvips program which might not be available in
all distributions.

Production/ is a convenient directory from which to run the actual
production of your game, i.e. the printing of sheets.  You tend to
edit and latex the files there to print the game.  See
Production/README.

Whitesheets/ is where whitesheets (in-game documents) are kept.  The
directory contains a README.tex file that covers what special commands
are available in whitesheets.  This file is also an example whitesheet
that can be latex'ed.




Game Files:

Starting Documents: In general, most latex'able game files start with
a \documentclass command like all LaTeX2e files.  This command points
the file at the game's class file (<gameclassname>), and defines the
game option (<option>) for the file:

  \documentclass[<option>]{<gameclassname>}

Some examples:

  \documentclass[char]{somegame}
  \documentclass[abils]{london}

The <option> tells which type of game document the file is, one of a
list of options defined in gametex.sty.  Some options are built on
other options, meaning they inherit the code.  For example, the char,
blue, and green options, for character sheets, bluesheets, and
greensheets respectively, all inherit the sheet option.  The sheet
option, which can be used for generic game "sheets" (such as a
scenario or rules document), contains LaTeX code which defines the
"interface" and "look and feel" of all the game's sheets.  Options
such as char customize this and create new commands unique to their
document type.  All GameTeX options are defined in gametex.sty; it's a
good idea to read through that file there to see how the different
options are organized and what they do.

Only one GameTeX option is directly used for a given file.  Though
other options may happen to be inherited, e.g. the char option's
inclusion of the sheet option, you cannot directly specify more than
one option.  Extra GameTeX options will be ignored with a warning
message.  If, for example, you create a file with

  \documentclass[char,blue]{somegame}

the blue option will be ignored.  Anytime you specify more than one
GameTeX option, the first will will be executed properly, and the
following ones will be ignored.  You can also pass options to the base
class (article is the default); this works just like passing options
to standard LaTeX2e classes.

The Charsheets/, Bluesheets/, Greensheets/, and Whitesheets/
directories each contain a README.tex file which is a latex'able
example sheet for the respective directory.  Each of these files
includes examples of commands provided for the given type of sheet.

Most game materials, whether or not they are documents in and of
themselves, are defined in the database set up in the Lists/
directory.  Each -LIST.tex file in Lists/ defines a type of game
element, its attributes, and a list of macros for that type (using the
functionality of datatypes.sty; see Lists/README).  For game elements
that are documents, notably most sheets, the macros contain pointers
to the given filepaths.  When creating a new character sheet, for
example, you should create both the file in Charsheets/ and the
character macro in Lists/char-LIST.tex.



Sheet Extraction: GameTeX accesses the contents of charsheets,
bluesheets, etc. by reading the associated files and extracting the
text between \begin{document} and \end{document} (using the
functionality of extraction.sty).  This text is available throughout
GameTeX via datatype macros in Lists/ such that, for example, you can
easily create a file that will print all of a character's bluesheets
(instead of having to print them each by hand).  Any document setup
code included before the \begin{document}, i.e. in the LaTeX preamble,
will not be extracted.

If you want to define local LaTeX macros (or other, similar LaTeX
hacking) for a sheet, you should put them after the \begin{document}
command, so that they will be included with the sheet text when it is
extracted.  Also, in general, you should avoid manipulating global
things.  When extracting multiple sheets for use in a single file,
GameTeX gives the text of each sheet its own TeX scope; however,
\global and similar constructs can defeat this.  Make sure you have at
least a basic understanding of how GameTeX handles sheet extraction
and collation before doing arbitrary global hacking.

Table of Contents, List of Figures, List of Tables, and Cross
Referencing (\label, \ref, and \pageref) are all standard LaTeX
features that are supported within extracted sheets.  Be gentle with
these features, as the code supporting them does a few tricks for
which LaTeX was never intended.  Bibliography, Index, and Glossary are
not supported, primarily because they require preamble code.




Game Elements:

Creating New Elements: When you create a new game element, such as a
bluesheet or ability, you first create a new macro for that element in
the appropriate -LIST.tex file (see Lists/README).

If the element has an associated sheet, you then create the sheet in
the appropriate directory, using the appropriate README.tex file as a
template.



Creating New Types of Elements: If you want to create a new kind of
game element, you should be familiar with the contents of the LaTeX/
directory, as this entails non-trivial customization.

If appropriate, you should create a -LIST.tex file for the type of
element.  See Lists/README; also, the existing -LIST.tex files can
serve as examples and templates for this.  In some cases, such as
badges and statcards, this isn't needed.

You should also either create a new GameTeX option for the element
type or modify an existing option.  See gametex.sty; also, the
existing options can serve as examples and templates for this.

If game elements of the new type require a new kind of associated
sheet, you should create a new directory, complete with a README.tex
example/template file, for the new kind of sheet.

If the new kind of element is something characters would receive in
their packets or such, you should modify char-LIST.tex and the char
option as appropriate.
